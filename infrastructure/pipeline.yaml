---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pipeline'
Parameters:
  ArtifactsBucketName:
    Type: String
  GitHubOAuthToken:
    Type: String
    NoEcho: true
Resources:
  PipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codepipeline.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'
  CloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'cloudformation.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'
  SmokeTestLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: 'codepipeline'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codepipeline:PutJobSuccessResult
            - codepipeline:PutJobFailureResult
            Resource: '*'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  SmokeTestLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub |
          'use strict';
          const zlib = require('zlib');
          const AWS = require('aws-sdk');
          AWS.config.setPromisesDependency(null);
          const codepipeline = new AWS.CodePipeline();
          function success(jobId, cb) {
            codepipeline.putJobSuccessResult({
              jobId: jobId
            }, cb);
          }
          function failure(jobId, err, cb) {
            codepipeline.putJobFailureResult({
              failureDetails: {
                message: `${err.message}: ${err.stack}`,
                type: 'JobFailed',

              },
              jobId: jobId
            }, cb);
          }
          exports.handler = (event, context, cb) => {
            console.log(JSON.stringify(event));
            const job = event['CodePipeline.job'];
            const s3 = new AWS.S3({accessKeyId: job.data.artifactCredentials.accessKeyId, secretAccessKey: job.data.artifactCredentials.secretAccessKey, sessionToken: job.data.artifactCredentials.sessionToken});
            const artifact = job.data.inputArtifacts.find((artifact) => artifact.name === 'Zip');
            s3.getObject({
              Bucket: artifact.location.s3Location.bucketName,
              Key: artifact.location.s3Location.objectKey
            }, (err, res) => {
              if (err) {
                failure(job.id, err, cb);
              } else {
                zlib.unzip(res.Body, function(err, res) {
                  if (err) {
                    failure(job.id, err, cb);
                  } else {
                    console.log(res.toString('utf8'));
                    success(job.id, cb);
                  }
                });
              }
            });
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !Sub '${SmokeTestLambdaRole.Arn}'
      Runtime: 'nodejs4.3'
      Timeout: 60
  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucketName
      Name: 'automation-for-the-people'
      RestartExecutionOnUpdate: true
      RoleArn: !Sub '${PipelineRole.Arn}'
      Stages:
      - Name: Source
        Actions:
        - Name: SourceAction
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Provider: GitHub
            Version: 1
          Configuration:
            Owner: michaelwittig
            Repo: 'automation-for-the-people'
            Branch: master
            OAuthToken: !Ref GitHubOAuthToken
          OutputArtifacts:
          - Name: Zip
          RunOrder: 1
      - Name: DeployPipeline
        Actions:
        - Name: DeployPipelineAction
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_IAM
            RoleArn: !Sub '${CloudFormationRole.Arn}'
            StackName: 'aftp-pipeline'
            TemplatePath: 'Zip::infrastructure/pipeline.yaml'
            ParameterOverrides: !Sub '{"ArtifactsBucketName": "${ArtifactsBucketName}", "GitHubOAuthToken": "${GitHubOAuthToken}"}'
          InputArtifacts:
          - Name: Zip
          RunOrder: 1
      - Name: DeployApplication
        Actions:
        - Name: DeployApplicationAction
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_IAM
            RoleArn: !Sub '${CloudFormationRole.Arn}'
            StackName: 'aftp-application'
            TemplateConfiguration: 'Zip::infrastructure/application.input.json'
            TemplatePath: 'Zip::infrastructure/application.yaml'
          InputArtifacts:
          - Name: Zip
          RunOrder: 1
      - Name: DeployEnvironmentStage
        Actions:
        - Name: DeployEnvironmentStageAction
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_IAM
            RoleArn: !Sub '${CloudFormationRole.Arn}'
            StackName: 'aftp-stage'
            OutputFileName: 'infrastructure/output-environment-stage.json'
            TemplateConfiguration: 'Zip::infrastructure/environment-stage.input.json'
            TemplatePath: 'Zip::infrastructure/environment.yaml'
          InputArtifacts:
          - Name: Zip
          OutputArtifacts:
          - Name: Stage
          RunOrder: 1
        - Name: DeployApplicationStageAction
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: ElasticBeanstalk
            Version: 1
          Configuration:
            ApplicationName: 'automation-for-the-people'
            EnvironmentName: 'automation-for-the-people-stage'
          InputArtifacts:
          - Name: Zip
          RunOrder: 2
        - Name: RunSmokeTestStageAction
          ActionTypeId:
            Category: Invoke
            Owner: AWS
            Provider: Lambda
            Version: 1
          Configuration:
            FunctionName: !Ref SmokeTestLambda
          InputArtifacts:
          - Name: Zip
          RunOrder: 3
      - Name: DeployEnvironmentProd
        Actions:
        - Name: DeployEnvironmentProdAction
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_IAM
            RoleArn: !Sub '${CloudFormationRole.Arn}'
            StackName: 'aftp-prod'
            OutputFileName: 'infrastructure/output-environment-prod.json'
            TemplateConfiguration: 'Zip::infrastructure/environment-prod.input.json'
            TemplatePath: 'Zip::infrastructure/environment.yaml'
          InputArtifacts:
          - Name: Zip
          OutputArtifacts:
          - Name: Prod
          RunOrder: 1
        - Name: DeployApplicationProdAction
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: ElasticBeanstalk
            Version: 1
          Configuration:
            ApplicationName: 'automation-for-the-people'
            EnvironmentName: 'automation-for-the-people-prod'
          InputArtifacts:
          - Name: Zip
          RunOrder: 2
